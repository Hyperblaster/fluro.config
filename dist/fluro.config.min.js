angular.module("fluro.config",["ngStorage"]).provider("Fluro",function(){var config={apiURL:"https://apiv2.fluro.io",token:null,sessionStorage:!1};return{set:function(settings){config=settings},$get:function(){return config}}}).service("FluroTokenService",function($rootScope,$injector,$sessionStorage,$localStorage,Fluro){var controller={};controller.storageLocation=function(){return Fluro.sessionStorage?$sessionStorage:$localStorage},controller.recall=function(){var storage=controller.storageLocation();storage.session&&($rootScope.user=storage.session,Fluro.token=storage.session.token,Fluro.tokenExpires=storage.session.expires,Fluro.refreshToken=storage.session.refreshToken)},controller.login=function(details,options){options||(options={});var autoAuthenticate=!0;options.disableAutoAuthenticate&&(autoAuthenticate=!1);var url=Fluro.apiURL+"/token/login";options.application&&(url="/fluro/application/login"),options.managedAccount&&(url=Fluro.apiURL+"/managed/"+options.managedAccount+"/login"),options.url&&(url=options.url);var $http=$injector.get("$http"),storage=controller.storageLocation(),request=$http.post(url,details);return request.success(function(res){autoAuthenticate&&(storage.session=res,controller.recall()),options.success&&options.success(res)}),request.error(function(res){options.error&&options.error(res)}),request},controller.signInAsPersona=function(personaID,options){options||(options={});var autoAuthenticate=!0;options.disableAutoAuthenticate&&(autoAuthenticate=!1);var $http=$injector.get("$http"),storage=controller.storageLocation(),request=$http.post(Fluro.apiURL+"/token/persona/"+personaID);return request.success(function(res){autoAuthenticate&&(storage.session=res,controller.recall()),options.success&&options.success(res)}),request.error(function(res){options.error&&options.error(res)}),request},controller.getTokenForAccount=function(accountId,options){options||(options={});var autoAuthenticate=!0;options.disableAutoAuthenticate&&(autoAuthenticate=!1);var $http=$injector.get("$http"),storage=controller.storageLocation(),request=$http.post(Fluro.apiURL+"/token/account/"+accountId);return request.success(function(res){autoAuthenticate&&(storage.session=res,controller.recall()),options.success&&options.success(res)}),request.error(function(res){options.error&&options.error(res)}),request},controller.hasExpired=function(){var storage=controller.storageLocation();if(storage.session){var expiry=new Date(storage.session.expires),now=new Date;return expiry.getTime()<=now.getTime()}};var inflightRequest;return controller.refresh=function(successCallback,errorCallback){if(inflightRequest)return console.log("refresh is inflight"),inflightRequest;var storage=controller.storageLocation(),$http=$injector.get("$http"),session=storage.session;return session&&session.refreshToken?(inflightRequest=$http.post(Fluro.apiURL+"/token/refresh",{refreshToken:session.refreshToken,managed:"managed"==session.accountType}),inflightRequest.success(function(res){return inflightRequest=null,storage.session.refreshToken=res.refreshToken,storage.session.token=res.token,storage.session.expires=res.expires,controller.recall(),successCallback?successCallback(res):void 0}),inflightRequest.error(function(res){return inflightRequest=null,"invalid_refresh_token"==res?(console.log("your token has expired"),controller.deleteSession()):console.log("error refreshing token",res),errorCallback?errorCallback(res):void 0}),inflightRequest):void 0},controller.deleteSession=function(){var storage=controller.storageLocation();storage.session=null,delete $rootScope.user,delete Fluro.token,delete Fluro.tokenExpires,delete Fluro.refreshToken},controller.logout=function(){controller.deleteSession()},controller.recall(),controller}).service("FluroAuthentication",function($q,Fluro,FluroTokenService){return{request:function(config){function startsWith(string){return config.url.slice(0,string.length)===string}function refreshSuccess(res){var newToken=res.data;config.headers.Authorization="Bearer "+newToken.token,deferred.resolve(config)}function refreshFailed(){FluroTokenService.backup?(FluroTokenService.backup.token&&(Fluro.token=FluroTokenService.backup.token,config.headers.Authorization="Bearer "+Fluro.token),FluroTokenService.backup.user&&($rootScope.user=FluroTokenService.backup.user),deferred.resolve(config)):deferred.reject(config)}if(!startsWith(Fluro.apiURL))return config;var date=new Date;if(Fluro.timezoneOffset&&String(Fluro.timezoneOffset).length){var websiteOffset=Fluro.timezoneOffset,viewerOffset=-1*date.getTimezoneOffset(),hoursDifference=websiteOffset-viewerOffset,offsetDifference=60*hoursDifference*1e3;date.setTime(date.getTime()+offsetDifference)}if(config.headers["fluro-request-date"]=date.toUTCString(),config.bypassInterceptor)return config;if(-1!=config.url.indexOf("/token/refresh"))return config;if(!Fluro.token)return config;var deferred=$q.defer();if(Fluro.tokenExpires){var expired=FluroTokenService.hasExpired();if(expired){var refreshRequest=FluroTokenService.refresh();refreshRequest.then(refreshSuccess,refreshFailed)}else config.headers.Authorization="Bearer "+Fluro.token,deferred.resolve(config)}else config.headers.Authorization="Bearer "+Fluro.token,deferred.resolve(config);return deferred.promise}}}).service("FluroTokenStore",function($sessionStorage,$localStorage,$q,$injector,Fluro,FluroTokenService){var storeInstance=function(key){var controller={};controller.defaultStorage="local",controller.get=function(){var storage=controller.storageLocation();return storage[key]},controller.storageLocation=function(){if(controller.storage)return controller.storage;switch(controller.defaultStorage){case"session":return $sessionStorage;default:return $localStorage}},controller.login=function(credentials,options){function loginComplete(res){storage[key]=res.data,console.log("Token Login Success",controller.defaultStorage,storage[key])}function loginFailed(res){console.log("Token Login Failed",res)}var storage=controller.storageLocation();options.disableAutoAuthenticate=!0;var request=FluroTokenService.login(credentials,options);return request.then(loginComplete,loginFailed),request},controller.hasExpired=function(){var storage=controller.storageLocation();if(storage[key]){var expiry=new Date(storage[key].expires),now=new Date;return expiry.getTime()<=now.getTime()}},controller.config=function(){function refreshSuccess(res){res.data;config.headers.Authorization="Bearer "+storage[key].token,deferred.resolve(config)}function refreshFailed(){deferred.reject(config)}var deferred=$q.defer(),storage=controller.storageLocation();if(!storage[key]||!storage[key].token)return deferred.reject(),deferred.promise;var config={};if(config.bypassInterceptor=!0,config.headers={Authorization:"Bearer "+storage[key].token},storage[key].expires){var expired=controller.hasExpired();if(expired){var refreshRequest=controller.refresh();refreshRequest.then(refreshSuccess,refreshFailed)}else config.headers.Authorization="Bearer "+storage[key].token,deferred.resolve(config)}else config.headers.Authorization="Bearer "+storage[key].token,deferred.resolve(config);return deferred.promise},controller.deleteSession=function(){var storage=controller.storageLocation();delete storage[key]};var inflightRequest;return controller.refresh=function(){if(inflightRequest)return inflightRequest;var storage=controller.storageLocation(),$http=$injector.get("$http"),storedUser=storage[key];return storedUser&&storedUser.refreshToken?(inflightRequest=$http.post(Fluro.apiURL+"/token/refresh",{refreshToken:storedUser.refreshToken}),inflightRequest.success(function(res){inflightRequest=null,storage[key].refreshToken=res.refreshToken,storage[key].token=res.token,storage[key].expires=res.expires}),inflightRequest.error(function(res){inflightRequest=null,"invalid_refresh_token"==res&&controller.deleteSession()}),inflightRequest):void 0},controller};return storeInstance});
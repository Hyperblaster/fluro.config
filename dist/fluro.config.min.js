angular.module("fluro.config",["ngStorage"]).provider("Fluro",function(){var config={apiURL:"https://apiv2.fluro.io",token:null,sessionStorage:!1};return{set:function(settings){config=settings},$get:function(){return config}}}).service("FluroTokenService",function($rootScope,$injector,$sessionStorage,$localStorage,Fluro){var controller={};return controller.storageLocation=function(){return Fluro.sessionStorage?$sessionStorage:$localStorage},controller.recall=function(){var storage=controller.storageLocation();storage.session&&($rootScope.user=storage.session,Fluro.token=storage.session.token,Fluro.tokenExpires=storage.session.expires,Fluro.refreshToken=storage.session.refreshToken,console.log("Session token recalled",storage.session.name,storage.session.account))},controller.login=function(details,options){options||(options={});var autoAuthenticate=!0;options.disableAutoAuthenticate&&(autoAuthenticate=!1);var $http=$injector.get("$http"),storage=controller.storageLocation(),request=$http.post(Fluro.apiURL+"/token/login",details);return request.success(function(res){autoAuthenticate&&(storage.session=res,controller.recall()),options.success&&options.success(res)}),request.error(function(res){options.error&&options.error(res)}),request},controller.collectToken=function(transferToken){var $http=$injector.get("$http"),storage=controller.storageLocation(),request=$http.get(Fluro.apiURL+"/token/collect/"+transferToken);return request.success(function(res){storage.session=res,controller.recall(),console.log("Collected User Session",res)}),request.error(function(){console.log("Error collecting token",token)}),request},controller.signInAsPersona=function(personaID,options){options||(options={});var autoAuthenticate=!0;options.disableAutoAuthenticate&&(autoAuthenticate=!1);var $http=$injector.get("$http"),storage=controller.storageLocation(),request=$http.post(Fluro.apiURL+"/token/persona/"+personaID);return request.success(function(res){autoAuthenticate&&(storage.session=res,controller.recall()),options.success&&options.success(res)}),request.error(function(res){options.error&&options.error(res)}),request},controller.getTokenForAccount=function(accountId,options){options||(options={});var autoAuthenticate=!0;options.disableAutoAuthenticate&&(autoAuthenticate=!1);var $http=$injector.get("$http"),storage=controller.storageLocation(),request=$http.post(Fluro.apiURL+"/token/account/"+accountId);return request.success(function(res){autoAuthenticate&&(storage.session=res,controller.recall()),options.success&&options.success(res)}),request.error(function(res){options.error&&options.error(res)}),request},controller.hasExpired=function(){var storage=controller.storageLocation();if(storage.session){var expiry=new Date(storage.session.expires),now=new Date;return expiry.getTime()<=now.getTime()}},controller.refresh=function(successCallback,errorCallback){var storage=controller.storageLocation(),$http=$injector.get("$http"),session=storage.session;if(session&&session.refreshToken){var request=$http.post(Fluro.apiURL+"/token/refresh",{refreshToken:session.refreshToken});request.success(function(res){console.log("token has been refreshed",res),storage.session.refreshToken=res.refreshToken,storage.session.token=res.token,storage.session.expires=res.expires,controller.recall(),successCallback&&successCallback(res)}),request.error(function(res){"invalid_refresh_token"==res?(console.log("your token has expired"),controller.deleteSession()):console.log("Error refreshing token",res),errorCallback&&errorCallback(res)})}},controller.deleteSession=function(){var storage=controller.storageLocation();storage.session=null,delete $rootScope.user,delete Fluro.token,delete Fluro.tokenExpires,delete Fluro.refreshToken},controller.logout=function(){controller.deleteSession()},controller.recall(),controller}).service("FluroAuthentication",function($q,Fluro,FluroTokenService){return{request:function(config){function startsWith(string){return config.url.slice(0,string.length)===string}function refreshSuccess(res){config.headers.Authorization="Bearer "+res.token,deferred.resolve(config)}function refreshFailed(){deferred.reject(config)}if(!startsWith(Fluro.apiURL))return config;var date=new Date;if(Fluro.timezoneOffset&&String(Fluro.timezoneOffset).length){var websiteOffset=Fluro.timezoneOffset,viewerOffset=-1*date.getTimezoneOffset(),hoursDifference=websiteOffset-viewerOffset,offsetDifference=60*hoursDifference*1e3;date.setTime(date.getTime()+offsetDifference)}if(config.headers["fluro-request-date"]=date.toUTCString(),config.bypassInterceptor)return config;if(-1!=config.url.indexOf("/token/refresh"))return config;var deferred=$q.defer();if(Fluro.token&&(config.headers.Authorization="Bearer "+Fluro.token),Fluro.tokenExpires){var expired=FluroTokenService.hasExpired();expired?FluroTokenService.refresh(refreshSuccess,refreshFailed):deferred.resolve(config)}else deferred.resolve(config);return deferred.promise}}});